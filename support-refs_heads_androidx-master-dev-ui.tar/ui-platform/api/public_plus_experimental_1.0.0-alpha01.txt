// Signature format: 3.0
package androidx.ui.autofill {

  public final class AndroidAutofillDebugUtilsKt {
    ctor public AndroidAutofillDebugUtilsKt();
  }

  public final class AndroidAutofillKt {
    ctor public AndroidAutofillKt();
  }

}

package androidx.ui.core {

  public final class AndroidCraneView extends android.view.ViewGroup implements androidx.ui.core.DensityReceiver androidx.ui.core.Owner androidx.ui.core.SemanticsTreeProvider {
    ctor public AndroidCraneView(android.content.Context context);
    method public androidx.ui.core.PxPosition calculatePosition();
    method public void callDraw(androidx.ui.painting.Canvas canvas, androidx.ui.core.ComponentNode node, androidx.ui.core.PxSize parentSize);
    method public java.util.List<androidx.ui.core.SemanticsTreeNode> getAllSemanticNodes();
    method public androidx.ui.autofill.Autofill? getAutofill();
    method public androidx.ui.autofill.AutofillTree getAutofillTree();
    method public kotlin.jvm.functions.Function0<kotlin.Unit>? getCommitUnsubscribe();
    method public kotlin.jvm.functions.Function0<kotlin.Unit> getConfigurationChangeObserver();
    method public androidx.ui.core.Constraints getConstraints();
    method public androidx.ui.core.Density getDensity();
    method public long getMeasureIteration();
    method public androidx.ui.core.Ref<androidx.ui.core.AndroidCraneView>? getRef();
    method public androidx.ui.core.LayoutNode getRoot();
    method public void onAttach(androidx.ui.core.ComponentNode node);
    method public void onDetach(androidx.ui.core.ComponentNode node);
    method public void onEndLayout(androidx.ui.core.LayoutNode layoutNode);
    method public void onEndMeasure(androidx.ui.core.LayoutNode layoutNode);
    method public void onInvalidate(androidx.ui.core.DrawNode drawNode);
    method public void onPositionChange(androidx.ui.core.LayoutNode layoutNode);
    method public void onRepaintBoundaryParamsChange(androidx.ui.core.RepaintBoundaryNode repaintBoundaryNode);
    method public void onRequestMeasure(androidx.ui.core.LayoutNode layoutNode);
    method public void onSizeChange(androidx.ui.core.LayoutNode layoutNode);
    method public void onStartLayout(androidx.ui.core.LayoutNode layoutNode);
    method public void onStartMeasure(androidx.ui.core.LayoutNode layoutNode);
    method public void runAfterLayout(kotlin.jvm.functions.Function0<kotlin.Unit> block);
    method public void sendEvent(android.view.MotionEvent event);
    method public void setCommitUnsubscribe(kotlin.jvm.functions.Function0<kotlin.Unit>? p);
    method public void setConfigurationChangeObserver(kotlin.jvm.functions.Function0<kotlin.Unit> p);
    method public void setConstraints(androidx.ui.core.Constraints p);
    method public void setRef(androidx.ui.core.Ref<androidx.ui.core.AndroidCraneView>? value);
    property public final androidx.ui.autofill.Autofill? autofill;
    property public final androidx.ui.autofill.AutofillTree autofillTree;
    property public final kotlin.jvm.functions.Function0<kotlin.Unit>? commitUnsubscribe;
    property public final kotlin.jvm.functions.Function0<kotlin.Unit> configurationChangeObserver;
    property public final androidx.ui.core.Constraints constraints;
    property public androidx.ui.core.Density density;
    property public long measureIteration;
    property public final androidx.ui.core.Ref<androidx.ui.core.AndroidCraneView>? ref;
    property public final androidx.ui.core.LayoutNode root;
  }

  public final class AndroidOwnerKt {
    ctor public AndroidOwnerKt();
  }

  public abstract sealed class ComponentNode implements androidx.compose.Emittable {
    method public void attach(androidx.ui.core.Owner owner);
    method public void detach();
    method public void emitInsertAt(int index, androidx.compose.Emittable instance);
    method public void emitMove(int from, int to, int count);
    method public void emitRemoveAt(int index, int count);
    method public final operator androidx.ui.core.ComponentNode get(int index);
    method protected androidx.ui.core.LayoutNode? getContainingLayoutNode();
    method public final int getCount();
    method public final int getDepth();
    method public final androidx.ui.core.Owner? getOwner();
    method public final Object? getOwnerData();
    method public final androidx.ui.core.ComponentNode? getParent();
    method public androidx.ui.core.LayoutNode? getParentLayoutNode();
    method public androidx.ui.core.RepaintBoundaryNode? getRepaintBoundary();
    method public final void setDepth(int p);
    method public final void setOwnerData(Object? p);
    method public final inline void visitChildren(kotlin.jvm.functions.Function1<? super androidx.ui.core.ComponentNode,kotlin.Unit> block);
    method public final inline void visitChildrenReverse(kotlin.jvm.functions.Function1<? super androidx.ui.core.ComponentNode,kotlin.Unit> block);
    property protected androidx.ui.core.LayoutNode? containingLayoutNode;
    property public final int count;
    property public final int depth;
    property public final androidx.ui.core.Owner? owner;
    property public final Object? ownerData;
    property public final androidx.ui.core.ComponentNode? parent;
    property public androidx.ui.core.LayoutNode? parentLayoutNode;
    property public androidx.ui.core.RepaintBoundaryNode? repaintBoundary;
  }

  public final class ComponentNodesKt {
    ctor public ComponentNodesKt();
    method public static void add(androidx.ui.core.ComponentNode, androidx.ui.core.ComponentNode child);
    method public static androidx.ui.core.PxPosition childToLocal(androidx.ui.core.LayoutNode, androidx.ui.core.LayoutNode child, androidx.ui.core.PxPosition childLocal);
    method public static androidx.ui.core.LayoutNode? findLastLayoutChild(androidx.ui.core.ComponentNode, kotlin.jvm.functions.Function1<? super androidx.ui.core.LayoutNode,java.lang.Boolean> block);
    method public static androidx.ui.core.DataNodeKey<kotlin.jvm.functions.Function1<androidx.ui.core.LayoutCoordinates,kotlin.Unit>> getOnChildPositionedKey();
    method public static androidx.ui.core.DataNodeKey<kotlin.jvm.functions.Function1<androidx.ui.core.LayoutCoordinates,kotlin.Unit>> getOnPositionedKey();
    method public static androidx.ui.core.DataNodeKey<java.lang.Object> getParentDataKey();
    method public static androidx.ui.core.PxPosition globalToLocal(androidx.ui.core.LayoutNode, androidx.ui.core.PxPosition global, boolean withOwnerOffset = true);
    method public static boolean hasNoLayoutDescendants(androidx.ui.core.ComponentNode);
    method public static boolean isAttached(androidx.ui.core.ComponentNode);
    method public static androidx.ui.core.PxPosition localToGlobal(androidx.ui.core.LayoutNode, androidx.ui.core.PxPosition local, boolean withOwnerOffset = true);
    method public static androidx.ui.core.PxPosition positionRelativeToAncestor(androidx.ui.core.LayoutNode, androidx.ui.core.LayoutNode ancestor);
    method public static androidx.ui.core.PxPosition positionRelativeToRoot(androidx.ui.core.LayoutNode);
    method public static androidx.ui.core.Owner requireOwner(androidx.ui.core.ComponentNode);
    method public static void visitLayoutChildren(androidx.ui.core.ComponentNode, kotlin.jvm.functions.Function1<? super androidx.ui.core.LayoutNode,kotlin.Unit> block);
  }

  public final class DataNode<T> extends androidx.ui.core.ComponentNode {
    ctor public DataNode(androidx.ui.core.DataNodeKey<T> key, T! value);
    method public androidx.ui.core.DataNodeKey<T> getKey();
    method public T! getValue();
    method public void setValue(T? p);
  }

  public final class DataNodeKey<T> {
    ctor public DataNodeKey(String name);
    method public String getName();
  }

  public final class DebugUtilsKt {
    ctor public DebugUtilsKt();
    method public static inline void ifDebug(kotlin.jvm.functions.Function0<kotlin.Unit> block);
  }

  public final class DrawNode extends androidx.ui.core.ComponentNode {
    ctor public DrawNode();
    method public boolean getNeedsPaint();
    method public kotlin.jvm.functions.Function3<androidx.ui.core.DensityReceiver,androidx.ui.painting.Canvas,androidx.ui.core.PxSize,kotlin.Unit>? getOnPaint();
    method public kotlin.jvm.functions.Function3<androidx.ui.core.DrawReceiver,androidx.ui.painting.Canvas,androidx.ui.core.PxSize,kotlin.Unit>? getOnPaintWithChildren();
    method public void invalidate();
    method public void setNeedsPaint(boolean p);
    method public void setOnPaint(kotlin.jvm.functions.Function3<? super androidx.ui.core.DensityReceiver,? super androidx.ui.painting.Canvas,? super androidx.ui.core.PxSize,kotlin.Unit>? value);
    method public void setOnPaintWithChildren(kotlin.jvm.functions.Function3<? super androidx.ui.core.DrawReceiver,? super androidx.ui.painting.Canvas,? super androidx.ui.core.PxSize,kotlin.Unit>? value);
    property public final boolean needsPaint;
    property public final kotlin.jvm.functions.Function3<androidx.ui.core.DensityReceiver,androidx.ui.painting.Canvas,androidx.ui.core.PxSize,kotlin.Unit>? onPaint;
    property public final kotlin.jvm.functions.Function3<androidx.ui.core.DrawReceiver,androidx.ui.painting.Canvas,androidx.ui.core.PxSize,kotlin.Unit>? onPaintWithChildren;
  }

  public final class LayoutNode extends androidx.ui.core.ComponentNode implements androidx.ui.core.Measurable androidx.ui.core.MeasureBlockScope {
    ctor public LayoutNode();
    method public boolean getAffectsParentSize();
    method public androidx.ui.core.Constraints getConstraints();
    method public androidx.ui.core.Density getDensity();
    method public androidx.ui.core.IntPx getHeight();
    method public java.util.List<androidx.ui.core.LayoutNode> getLayoutChildren();
    method public kotlin.jvm.functions.Function3<androidx.ui.core.DensityReceiver,java.util.List<? extends androidx.ui.core.IntrinsicMeasurable>,androidx.ui.core.IntPx,androidx.ui.core.IntPx> getMaxIntrinsicHeightBlock();
    method public kotlin.jvm.functions.Function3<androidx.ui.core.DensityReceiver,java.util.List<? extends androidx.ui.core.IntrinsicMeasurable>,androidx.ui.core.IntPx,androidx.ui.core.IntPx> getMaxIntrinsicWidthBlock();
    method public kotlin.jvm.functions.Function3<androidx.ui.core.MeasureBlockScope,java.util.List<? extends androidx.ui.core.Measurable>,androidx.ui.core.Constraints,androidx.ui.core.LayoutResult> getMeasureBlock();
    method public kotlin.jvm.functions.Function3<androidx.ui.core.DensityReceiver,java.util.List<? extends androidx.ui.core.IntrinsicMeasurable>,androidx.ui.core.IntPx,androidx.ui.core.IntPx> getMinIntrinsicHeightBlock();
    method public kotlin.jvm.functions.Function3<androidx.ui.core.DensityReceiver,java.util.List<? extends androidx.ui.core.IntrinsicMeasurable>,androidx.ui.core.IntPx,androidx.ui.core.IntPx> getMinIntrinsicWidthBlock();
    method public boolean getNeedsRelayout();
    method public boolean getNeedsRemeasure();
    method public Object? getParentData();
    method public androidx.ui.core.Placeable getPlaceable();
    method public boolean getPositionedDuringMeasurePass();
    method public androidx.ui.core.Ref<androidx.ui.core.LayoutNode>? getRef();
    method public boolean getVisible();
    method public androidx.ui.core.IntPx getWidth();
    method public androidx.ui.core.IntPx getX();
    method public androidx.ui.core.IntPx getY();
    method public boolean isInMeasure();
    method public androidx.ui.core.LayoutResult layout(androidx.ui.core.IntPx width, androidx.ui.core.IntPx height, kotlin.Pair<? extends androidx.ui.core.AlignmentLine,androidx.ui.core.IntPx>![] alignmentLines, kotlin.jvm.functions.Function1<? super androidx.ui.core.PositioningBlockScope,kotlin.Unit> positioningBlock);
    method public androidx.ui.core.IntPx maxIntrinsicHeight(androidx.ui.core.IntPx width);
    method public androidx.ui.core.IntPx maxIntrinsicWidth(androidx.ui.core.IntPx height);
    method public androidx.ui.core.Placeable measure(androidx.ui.core.Constraints constraints);
    method public androidx.ui.core.IntPx minIntrinsicHeight(androidx.ui.core.IntPx width);
    method public androidx.ui.core.IntPx minIntrinsicWidth(androidx.ui.core.IntPx height);
    method public void place(androidx.ui.core.IntPx x, androidx.ui.core.IntPx y);
    method public void placeChildren();
    method public kotlin.Unit? requestRemeasure();
    method public void setAffectsParentSize(boolean p);
    method public void setConstraints(androidx.ui.core.Constraints p);
    method public void setInMeasure(boolean p);
    method public void setMaxIntrinsicHeightBlock(kotlin.jvm.functions.Function3<? super androidx.ui.core.DensityReceiver,? super java.util.List<? extends androidx.ui.core.IntrinsicMeasurable>,? super androidx.ui.core.IntPx,androidx.ui.core.IntPx> value);
    method public void setMaxIntrinsicWidthBlock(kotlin.jvm.functions.Function3<? super androidx.ui.core.DensityReceiver,? super java.util.List<? extends androidx.ui.core.IntrinsicMeasurable>,? super androidx.ui.core.IntPx,androidx.ui.core.IntPx> value);
    method public void setMeasureBlock(kotlin.jvm.functions.Function3<? super androidx.ui.core.MeasureBlockScope,? super java.util.List<? extends androidx.ui.core.Measurable>,? super androidx.ui.core.Constraints,androidx.ui.core.LayoutResult> value);
    method public void setMinIntrinsicHeightBlock(kotlin.jvm.functions.Function3<? super androidx.ui.core.DensityReceiver,? super java.util.List<? extends androidx.ui.core.IntrinsicMeasurable>,? super androidx.ui.core.IntPx,androidx.ui.core.IntPx> value);
    method public void setMinIntrinsicWidthBlock(kotlin.jvm.functions.Function3<? super androidx.ui.core.DensityReceiver,? super java.util.List<? extends androidx.ui.core.IntrinsicMeasurable>,? super androidx.ui.core.IntPx,androidx.ui.core.IntPx> value);
    method public void setNeedsRelayout$lintWithKotlin(boolean p);
    method public void setNeedsRemeasure$lintWithKotlin(boolean p);
    method public void setPositionedDuringMeasurePass(boolean p);
    method public void setRef(androidx.ui.core.Ref<androidx.ui.core.LayoutNode>? value);
    property public final boolean affectsParentSize;
    property public final androidx.ui.core.Constraints constraints;
    property protected androidx.ui.core.LayoutNode? containingLayoutNode;
    property public androidx.ui.core.Density density;
    property public final androidx.ui.core.IntPx height;
    property public final boolean isInMeasure;
    property public final java.util.List<androidx.ui.core.LayoutNode> layoutChildren;
    property public final kotlin.jvm.functions.Function3<androidx.ui.core.DensityReceiver,java.util.List<? extends androidx.ui.core.IntrinsicMeasurable>,androidx.ui.core.IntPx,androidx.ui.core.IntPx> maxIntrinsicHeightBlock;
    property public final kotlin.jvm.functions.Function3<androidx.ui.core.DensityReceiver,java.util.List<? extends androidx.ui.core.IntrinsicMeasurable>,androidx.ui.core.IntPx,androidx.ui.core.IntPx> maxIntrinsicWidthBlock;
    property public final kotlin.jvm.functions.Function3<androidx.ui.core.MeasureBlockScope,java.util.List<? extends androidx.ui.core.Measurable>,androidx.ui.core.Constraints,androidx.ui.core.LayoutResult> measureBlock;
    property public final kotlin.jvm.functions.Function3<androidx.ui.core.DensityReceiver,java.util.List<? extends androidx.ui.core.IntrinsicMeasurable>,androidx.ui.core.IntPx,androidx.ui.core.IntPx> minIntrinsicHeightBlock;
    property public final kotlin.jvm.functions.Function3<androidx.ui.core.DensityReceiver,java.util.List<? extends androidx.ui.core.IntrinsicMeasurable>,androidx.ui.core.IntPx,androidx.ui.core.IntPx> minIntrinsicWidthBlock;
    property public final boolean needsRelayout;
    property public final boolean needsRemeasure;
    property public Object? parentData;
    property public androidx.ui.core.LayoutNode? parentLayoutNode;
    property public final androidx.ui.core.Placeable placeable;
    property public final boolean positionedDuringMeasurePass;
    property public final androidx.ui.core.Ref<androidx.ui.core.LayoutNode>? ref;
    property public final boolean visible;
    property public final androidx.ui.core.IntPx width;
    property public final androidx.ui.core.IntPx x;
    property public final androidx.ui.core.IntPx y;
  }

  public interface Owner {
    method public androidx.ui.core.PxPosition calculatePosition();
    method public androidx.ui.core.Density getDensity();
    method public long getMeasureIteration();
    method public void onAttach(androidx.ui.core.ComponentNode node);
    method public void onDetach(androidx.ui.core.ComponentNode node);
    method public void onEndLayout(androidx.ui.core.LayoutNode layoutNode);
    method public void onEndMeasure(androidx.ui.core.LayoutNode layoutNode);
    method public void onInvalidate(androidx.ui.core.DrawNode drawNode);
    method public void onPositionChange(androidx.ui.core.LayoutNode layoutNode);
    method public void onRepaintBoundaryParamsChange(androidx.ui.core.RepaintBoundaryNode repaintBoundaryNode);
    method public void onRequestMeasure(androidx.ui.core.LayoutNode layoutNode);
    method public void onSizeChange(androidx.ui.core.LayoutNode layoutNode);
    method public void onStartLayout(androidx.ui.core.LayoutNode layoutNode);
    method public void onStartMeasure(androidx.ui.core.LayoutNode layoutNode);
    method public void runAfterLayout(kotlin.jvm.functions.Function0<kotlin.Unit> block);
    property public abstract androidx.ui.core.Density density;
    property public abstract long measureIteration;
  }

  public final class PointerInputNode extends androidx.ui.core.ComponentNode {
    ctor public PointerInputNode();
    method public kotlin.jvm.functions.Function2<java.util.List<androidx.ui.core.PointerInputChange>,androidx.ui.core.PointerEventPass,java.util.List<androidx.ui.core.PointerInputChange>> getPointerInputHandler();
    method public void setPointerInputHandler(kotlin.jvm.functions.Function2<? super java.util.List<androidx.ui.core.PointerInputChange>,? super androidx.ui.core.PointerEventPass,? extends java.util.List<androidx.ui.core.PointerInputChange>> p);
    property public final kotlin.jvm.functions.Function2<java.util.List<androidx.ui.core.PointerInputChange>,androidx.ui.core.PointerEventPass,java.util.List<androidx.ui.core.PointerInputChange>> pointerInputHandler;
  }

  public final class Ref<T> {
    ctor public Ref();
    method public T? getValue();
    method public void setValue(T? p);
    property public final T? value;
  }

  public final class RepaintBoundaryNode extends androidx.ui.core.ComponentNode {
    ctor public RepaintBoundaryNode(String? name);
    method public boolean getClipToShape();
    method public androidx.ui.core.Dp getElevation();
    method public String? getName();
    method public float getOpacity();
    method public androidx.ui.engine.geometry.Shape? getShape();
    method public void setClipToShape(boolean value);
    method public void setElevation(androidx.ui.core.Dp value);
    method public void setOpacity(float value);
    method public void setShape(androidx.ui.engine.geometry.Shape? value);
    property public final boolean clipToShape;
    property public final androidx.ui.core.Dp elevation;
    property public final float opacity;
    property public androidx.ui.core.RepaintBoundaryNode? repaintBoundary;
    property public final androidx.ui.engine.geometry.Shape? shape;
  }

  public final class SemanticsComponentNode extends androidx.ui.core.ComponentNode {
    ctor public SemanticsComponentNode(androidx.ui.core.semantics.SemanticsConfiguration semanticsConfiguration, boolean container, boolean explicitChildNodes);
    ctor public SemanticsComponentNode();
    method public boolean getContainer();
    method public boolean getExplicitChildNodes();
    method public androidx.ui.core.semantics.SemanticsConfiguration getSemanticsConfiguration();
    method public void setContainer(boolean p);
    method public void setExplicitChildNodes(boolean p);
    method public void setSemanticsConfiguration(androidx.ui.core.semantics.SemanticsConfiguration p);
    property public final boolean container;
    property public final boolean explicitChildNodes;
    property public final androidx.ui.core.semantics.SemanticsConfiguration semanticsConfiguration;
  }

  public interface SemanticsTreeNode {
    method public java.util.Set<androidx.ui.core.SemanticsTreeNode> getChildren();
    method public androidx.ui.core.semantics.SemanticsConfiguration getData();
    method public androidx.ui.core.PxPosition? getGlobalPosition();
    method public androidx.ui.core.SemanticsTreeNode? getParent();
    property public abstract java.util.Set<androidx.ui.core.SemanticsTreeNode> children;
    property public abstract androidx.ui.core.semantics.SemanticsConfiguration data;
    property public abstract androidx.ui.core.PxPosition? globalPosition;
    property public abstract androidx.ui.core.SemanticsTreeNode? parent;
  }

  public final class SemanticsTreeNodeImpl implements androidx.ui.core.SemanticsTreeNode {
    ctor public SemanticsTreeNodeImpl(androidx.ui.core.SemanticsTreeNode? parent, androidx.ui.core.SemanticsComponentNode semanticsComponentNode);
    method public void addChild(androidx.ui.core.SemanticsTreeNode child);
    method public java.util.Set<androidx.ui.core.SemanticsTreeNode> getChildren();
    method public androidx.ui.core.semantics.SemanticsConfiguration getData();
    method public androidx.ui.core.PxPosition? getGlobalPosition();
    method public androidx.ui.core.SemanticsTreeNode? getParent();
    property public java.util.Set<androidx.ui.core.SemanticsTreeNode> children;
    property public androidx.ui.core.semantics.SemanticsConfiguration data;
    property public androidx.ui.core.PxPosition? globalPosition;
  }

  public final class SemanticsTreeNodeImplKt {
    ctor public SemanticsTreeNodeImplKt();
  }

  public interface SemanticsTreeProvider {
    method public java.util.List<androidx.ui.core.SemanticsTreeNode> getAllSemanticNodes();
    method public void sendEvent(android.view.MotionEvent event);
  }

}

package androidx.ui.core.input {

  public final class RecordingInputConnectionKt {
    ctor public RecordingInputConnectionKt();
  }

  public final class TextInputServiceAndroidKt {
    ctor public TextInputServiceAndroidKt();
  }

}

package androidx.ui.core.pointerinput {

  public final class MotionEventAdapterKt {
    ctor public MotionEventAdapterKt();
  }

  public final class PointerInputEventData {
    ctor public PointerInputEventData(int id, androidx.ui.core.PointerInputData pointerInputData);
    method public int component1();
    method public androidx.ui.core.PointerInputData component2();
    method public androidx.ui.core.pointerinput.PointerInputEventData copy(int id, androidx.ui.core.PointerInputData pointerInputData);
    method public int getId();
    method public androidx.ui.core.PointerInputData getPointerInputData();
  }

  public final class PointerInputEventProcessorKt {
    ctor public PointerInputEventProcessorKt();
  }

}

package androidx.ui.core.semantics {

  public final class SemanticsConfiguration implements java.lang.Iterable<java.util.Map.Entry<? extends androidx.ui.semantics.SemanticsPropertyKey<?>,?>> kotlin.jvm.internal.markers.KMappedMarker androidx.ui.semantics.SemanticsPropertyReceiver {
    ctor public SemanticsConfiguration();
    method public operator <T> boolean contains(androidx.ui.semantics.SemanticsPropertyKey<T> key);
    method public androidx.ui.core.semantics.SemanticsConfiguration copy();
    method public operator <T> T! get(androidx.ui.semantics.SemanticsPropertyKey<T> key);
    method public boolean getExplicitChildNodes();
    method public boolean getHasBeenAnnotated();
    method public <T> T! getOrElse(androidx.ui.semantics.SemanticsPropertyKey<T> key, kotlin.jvm.functions.Function0<? extends T> defaultValue);
    method public <T> T? getOrElseNullable(androidx.ui.semantics.SemanticsPropertyKey<T> key, kotlin.jvm.functions.Function0<? extends T> defaultValue);
    method public boolean isMergingSemanticsOfDescendants();
    method public boolean isSemanticBoundary();
    method public java.util.Iterator<java.util.Map.Entry<androidx.ui.semantics.SemanticsPropertyKey<?>,java.lang.Object>> iterator();
    method public <T> void set(androidx.ui.semantics.SemanticsPropertyKey<T> key, T? value);
    method public void setExplicitChildNodes(boolean p);
    method public void setMergingSemanticsOfDescendants(boolean value);
    method public void setSemanticBoundary(boolean value);
    property public final boolean explicitChildNodes;
    property public final boolean hasBeenAnnotated;
    property public final boolean isMergingSemanticsOfDescendants;
    property public final boolean isSemanticBoundary;
  }

  public final class SemanticsConfigurationKt {
    ctor public SemanticsConfigurationKt();
    method public static <T> T? getOrNull(androidx.ui.core.semantics.SemanticsConfiguration, androidx.ui.semantics.SemanticsPropertyKey<T> key);
  }

  public final class SemanticsHintOverrides {
    ctor public SemanticsHintOverrides(String? onTapHint, String? onLongPressHint);
    method public String? component1();
    method public String? component2();
    method public androidx.ui.core.semantics.SemanticsHintOverrides copy(String? onTapHint, String? onLongPressHint);
    method public String? getOnLongPressHint();
    method public String? getOnTapHint();
    method public boolean isNotEmpty();
    property public final boolean isNotEmpty;
  }

  public final class SemanticsNode {
    ctor public SemanticsNode();
    method public boolean getAttached();
    method public java.util.List<androidx.ui.core.semantics.SemanticsNode> getChildren();
    method public int getChildrenCount();
    method public androidx.ui.core.semantics.SemanticsConfiguration getConfig();
    method public int getDepth();
    method public boolean getHasChildren();
    method public int getId();
    method public boolean getMergeAllDescendantsIntoThisNode();
    method public androidx.ui.core.semantics.SemanticsOwner? getOwner();
    method public androidx.ui.core.semantics.SemanticsNode? getParent();
    method public androidx.ui.engine.geometry.Rect? getParentPaintClipRect();
    method public androidx.ui.engine.geometry.Rect? getParentSemanticsClipRect();
    method public androidx.ui.engine.geometry.Rect getRect();
    method public boolean isInvisible();
    method public boolean isMergedIntoParent();
    method public boolean isPartOfNodeMerging();
    method public void redepthChild(androidx.ui.core.semantics.SemanticsNode child);
    method public void redepthChildren();
    method public void setChildren(java.util.List<androidx.ui.core.semantics.SemanticsNode> p);
    method public void setMergedIntoParent(boolean value);
    method public void setParent(androidx.ui.core.semantics.SemanticsNode? p);
    method public void setParentPaintClipRect(androidx.ui.engine.geometry.Rect? p);
    method public void setParentSemanticsClipRect(androidx.ui.engine.geometry.Rect? p);
    method public void setRect(androidx.ui.engine.geometry.Rect value);
    property public final boolean attached;
    property public final java.util.List<androidx.ui.core.semantics.SemanticsNode> children;
    property public final int childrenCount;
    property public final androidx.ui.core.semantics.SemanticsConfiguration config;
    property public final int depth;
    property public final boolean hasChildren;
    property public final boolean isInvisible;
    property public final boolean isMergedIntoParent;
    property public final boolean isPartOfNodeMerging;
    property public final boolean mergeAllDescendantsIntoThisNode;
    property public final androidx.ui.core.semantics.SemanticsOwner? owner;
    property public final androidx.ui.core.semantics.SemanticsNode? parent;
    property public final androidx.ui.engine.geometry.Rect? parentPaintClipRect;
    property public final androidx.ui.engine.geometry.Rect? parentSemanticsClipRect;
    property public final androidx.ui.engine.geometry.Rect rect;
    field public static final androidx.ui.core.semantics.SemanticsNode.Companion! Companion;
  }

  public static final class SemanticsNode.Companion {
    method public androidx.ui.core.semantics.SemanticsNode root(androidx.ui.core.semantics.SemanticsOwner owner);
  }

  public final class SemanticsNodeKt {
    ctor public SemanticsNodeKt();
  }

  public final class SemanticsOwner {
    ctor public SemanticsOwner();
  }

}

package androidx.ui.internal {

  public final class Unicode {
    field public static final String ALM = "\u061c";
    field public static final String FSI = "\u2068";
    field public static final androidx.ui.internal.Unicode! INSTANCE;
    field public static final String LRE = "\u202a";
    field public static final String LRI = "\u2066";
    field public static final String LRM = "\u200e";
    field public static final String LRO = "\u202d";
    field public static final String PDF = "\u202c";
    field public static final String PDI = "\u2069";
    field public static final String RLE = "\u202b";
    field public static final String RLI = "\u2067";
    field public static final String RLM = "\u200f";
    field public static final String RLO = "\u202e";
  }

}

